#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct Node
{
    char value;
    struct Node *left;
    struct Node *right;       
}; 
struct Node* createTree(char a[],char b[],int al,int ar,int bl,int br)
{
    int i=0;
    struct Node *p=NULL;
    if(bl==br)
    {
        printf("%c",b[bl]);
        p=(struct Node*)malloc(sizeof(struct Node));
        if(NULL==p) 
        {
            perror("faileed");
            exit(-1);            
        }
        p->value=b[bl];
        p->left=NULL;
        p->right=NULL;
        return p;               
    }
    while(b[i]!=a[al]) i++;
    p=(struct Node*)malloc(sizeof(struct Node));
    if(NULL==p)
    {
        perror("failed");           
        exit(-1);
    }
    p->value=b[i];//子树根节点
    p->left=NULL;
    p->right=NULL;    
    if(i>bl)
        p->left=createTree(a+1,b,0,i-1,0,i-1);
    if(i<br)
        p->right=createTree(a+i+1,b+i+1,0,ar-i-1,0,br-i-1);
    printf("%c",b[i]);
    return p;
} 
void preOrder(struct Node *p)
{
    if(NULL==p)
        return;
    printf("%c",p->value);
    preOrder(p->left);
    preOrder(p->right);     
}
void midOrder(struct Node *p)
{
    if(NULL==p)
        return;
    midOrder(p->left);
    printf("%c",p->value);
    midOrder(p->right);     
}
void backOrder(struct Node *p)
{
    if(NULL==p)
        return;
    backOrder(p->left);
    backOrder(p->right);
    printf("%c",p->value);     
}
int main()
{
    char a[100],b[100];
    int alen,blen;
    struct Node *root;
    while(scanf("%s%s",a,b)!=EOF)
    {
        alen=strlen(a);//先序 
        blen=strlen(b);//中序 
        root=createTree(a,b,0,alen-1,0,blen-1);
        printf("\n");
        printf("preOder:");
        preOrder(root); 
        printf("\n");
        printf("midOder:");
        midOrder(root); 
        printf("\n");
        printf("backOder:");
        backOrder(root); 
        printf("\n");                            
    }
    system("pause");
    return 0;    
}
